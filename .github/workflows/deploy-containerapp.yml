name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: ai-security-rg
  AZURE_LOCATION: eastus
  ACR_NAME: aisecurityacr
  MCP_SERVER_NAME: mcp-server
  WEB_APP_NAME: ai-security-web
  CONTAINER_ENV_NAME: ai-security-env
  APIM_NAME: ai-security-apim
  APIM_PUBLISHER_EMAIL: admin@example.com
  APIM_PUBLISHER_NAME: AI Security Admin
  # APIM SKU: Basic, Standard, or Premium support MCP servers
  # Developer and Consumption tiers do NOT support MCP servers yet
  APIM_SKU_NAME: Basic
  APIM_SKU_CAPACITY: 1

jobs:
  # Job 1: Build and Deploy MCP Server
  deploy-mcp-server:
    runs-on: ubuntu-latest
    name: Deploy MCP Server to Container Apps
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install MCP Server Dependencies
        run: |
          cd mcp-server
          npm install

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group (if not exists)
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags environment=production project=ai-security-demo

      - name: Create Azure Container Registry (if not exists)
        run: |
          if ! az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 2>/dev/null; then
            echo "Creating Azure Container Registry..."
            az acr create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.ACR_NAME }} \
              --sku Basic \
              --admin-enabled true
          else
            echo "Azure Container Registry already exists"
          fi

      - name: Build and Push MCP Server Docker Image
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          cd mcp-server
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/mcp-server:${{ github.sha }} .
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/mcp-server:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/mcp-server:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/mcp-server:latest

      - name: Create Container Apps Environment (if not exists)
        run: |
          if ! az containerapp env show --name ${{ env.CONTAINER_ENV_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 2>/dev/null; then
            echo "Creating Container Apps Environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_ENV_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }}
          fi

      - name: Get ACR Credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
          echo "::add-mask::$ACR_PASSWORD"
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Deploy/Update MCP Server Container App
        run: |
          if az containerapp show --name ${{ env.MCP_SERVER_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 2>/dev/null; then
            echo "Updating existing MCP Server..."
            az containerapp update \
              --name ${{ env.MCP_SERVER_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/mcp-server:${{ github.sha }}
          else
            echo "Creating new MCP Server..."
            az containerapp create \
              --name ${{ env.MCP_SERVER_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/mcp-server:${{ github.sha }} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 10 \
              --cpu 0.5 \
              --memory 1.0Gi \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io \
              --registry-username ${{ steps.acr-creds.outputs.username }} \
              --registry-password ${{ steps.acr-creds.outputs.password }} \
              --secrets \
                azure-openai-endpoint=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
                azure-openai-key=${{ secrets.AZURE_OPENAI_API_KEY }} \
              --env-vars \
                AZURE_OPENAI_ENDPOINT=secretref:azure-openai-endpoint \
                AZURE_OPENAI_API_KEY=secretref:azure-openai-key \
                AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
                PORT=8080 \
                NODE_ENV=production
          fi

      - name: Get MCP Server URL
        id: mcp-url
        run: |
          MCP_URL=$(az containerapp show \
            --name ${{ env.MCP_SERVER_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "MCP Server URL: https://$MCP_URL"
          echo "url=https://$MCP_URL" >> $GITHUB_OUTPUT

    outputs:
      mcp-server-url: ${{ steps.mcp-url.outputs.url }}

  # Job 2: Build and Deploy Web App to Container Apps
  deploy-web-app:
    runs-on: ubuntu-latest
    needs: deploy-mcp-server
    name: Deploy Web App to Container Apps
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_MCP_SERVER_ENDPOINT: ${{ needs.deploy-mcp-server.outputs.mcp-server-url }}
          VITE_MCP_API_KEY: ${{ secrets.MCP_API_KEY }}
          VITE_AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          VITE_AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          VITE_AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
          VITE_AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          VITE_AZURE_OPENAI_MODEL: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Dockerfile for Web App
        run: |
          cat > Dockerfile <<'EOF'
          FROM node:20-alpine
          
          WORKDIR /app
          
          # Copy package files
          COPY package.json package-lock.json ./
          
          # Install ALL dependencies (including devDependencies needed for runtime)
          RUN npm ci
          
          # Copy all source files
          COPY . .
          
          # Accept build arguments for environment variables
          ARG VITE_MCP_SERVER_ENDPOINT
          ARG VITE_MCP_API_KEY
          ARG VITE_AZURE_OPENAI_ENDPOINT
          ARG VITE_AZURE_OPENAI_API_KEY
          ARG VITE_AZURE_OPENAI_DEPLOYMENT
          ARG VITE_AZURE_OPENAI_API_VERSION
          ARG VITE_AZURE_OPENAI_MODEL
          
          # Set as environment variables for the build
          ENV VITE_MCP_SERVER_ENDPOINT=$VITE_MCP_SERVER_ENDPOINT
          ENV VITE_MCP_API_KEY=$VITE_MCP_API_KEY
          ENV VITE_AZURE_OPENAI_ENDPOINT=$VITE_AZURE_OPENAI_ENDPOINT
          ENV VITE_AZURE_OPENAI_API_KEY=$VITE_AZURE_OPENAI_API_KEY
          ENV VITE_AZURE_OPENAI_DEPLOYMENT=$VITE_AZURE_OPENAI_DEPLOYMENT
          ENV VITE_AZURE_OPENAI_API_VERSION=$VITE_AZURE_OPENAI_API_VERSION
          ENV VITE_AZURE_OPENAI_MODEL=$VITE_AZURE_OPENAI_MODEL
          
          # Build the application
          RUN npm run build
          
          # Set environment
          ENV NODE_ENV=production
          ENV HOST=0.0.0.0
          ENV PORT=3000
          
          # Expose port
          EXPOSE 3000
          
          # Start using custom server entry point
          CMD ["node", "server-entry.js"]
          EOF

      - name: Build and Push Web App Docker Image
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          docker build \
            --build-arg VITE_MCP_SERVER_ENDPOINT=${{ needs.deploy-mcp-server.outputs.mcp-server-url }} \
            --build-arg VITE_MCP_API_KEY=${{ secrets.MCP_API_KEY }} \
            --build-arg VITE_AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            --build-arg VITE_AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            --build-arg VITE_AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
            --build-arg VITE_AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
            --build-arg VITE_AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
            -t ${{ env.ACR_NAME }}.azurecr.io/web-app:${{ github.sha }} .
          docker build \
            --build-arg VITE_MCP_SERVER_ENDPOINT=${{ needs.deploy-mcp-server.outputs.mcp-server-url }} \
            --build-arg VITE_MCP_API_KEY=${{ secrets.MCP_API_KEY }} \
            --build-arg VITE_AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            --build-arg VITE_AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            --build-arg VITE_AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
            --build-arg VITE_AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
            --build-arg VITE_AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
            -t ${{ env.ACR_NAME }}.azurecr.io/web-app:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/web-app:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/web-app:latest

      - name: Get ACR Credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)
          echo "::add-mask::$ACR_PASSWORD"
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Deploy/Update Web App Container App
        run: |
          if az containerapp show --name ${{ env.WEB_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 2>/dev/null; then
            echo "Updating existing Web App..."
            az containerapp update \
              --name ${{ env.WEB_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/web-app:${{ github.sha }} \
              --set-env-vars \
                VITE_MCP_SERVER_ENDPOINT=${{ needs.deploy-mcp-server.outputs.mcp-server-url }} \
                MCP_SERVER_ENDPOINT=${{ needs.deploy-mcp-server.outputs.mcp-server-url }} \
                VITE_MCP_API_KEY=${{ secrets.MCP_API_KEY }} \
                MCP_API_KEY=${{ secrets.MCP_API_KEY }} \
                VITE_AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
                AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
                VITE_AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
                AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
                VITE_AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                VITE_AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
                AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
                VITE_AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                NODE_ENV=production \
                PORT=3000
          else
            echo "Creating new Web App..."
            az containerapp create \
              --name ${{ env.WEB_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/web-app:${{ github.sha }} \
              --target-port 3000 \
              --ingress external \
              --min-replicas 0 \
              --max-replicas 5 \
              --cpu 0.5 \
              --memory 1.0Gi \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io \
              --registry-username ${{ steps.acr-creds.outputs.username }} \
              --registry-password ${{ steps.acr-creds.outputs.password }} \
              --env-vars \
                VITE_MCP_SERVER_ENDPOINT=${{ needs.deploy-mcp-server.outputs.mcp-server-url }} \
                MCP_SERVER_ENDPOINT=${{ needs.deploy-mcp-server.outputs.mcp-server-url }} \
                VITE_MCP_API_KEY=${{ secrets.MCP_API_KEY }} \
                MCP_API_KEY=${{ secrets.MCP_API_KEY }} \
                VITE_AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
                AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
                VITE_AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
                AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
                VITE_AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                VITE_AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
                AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }} \
                VITE_AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                AZURE_OPENAI_MODEL=${{ secrets.AZURE_OPENAI_DEPLOYMENT }} \
                NODE_ENV=production \
                PORT=3000
          fi

      - name: Get Web App URL
        id: webapp-url
        run: |
          WEBAPP_URL=$(az containerapp show \
            --name ${{ env.WEB_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn -o tsv)
          echo "Web App URL: https://$WEBAPP_URL"
          echo "url=https://$WEBAPP_URL" >> $GITHUB_OUTPUT

    outputs:
      web-app-url: ${{ steps.webapp-url.outputs.url }}

  # Job 3: Deploy and Configure Azure API Management
  deploy-apim:
    runs-on: ubuntu-latest
    needs: [deploy-mcp-server, deploy-web-app]
    name: Deploy Azure API Management Gateway
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create API Management Instance (if not exists)
        run: |
          if ! az apim show --name ${{ env.APIM_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} 2>/dev/null; then
            echo "Creating Azure API Management instance with ${{ env.APIM_SKU_NAME }} tier (supports MCP servers)..."
            echo "⏱️  This takes 30-45 minutes for initial provisioning..."
            az apim create \
              --name ${{ env.APIM_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }} \
              --publisher-email ${{ env.APIM_PUBLISHER_EMAIL }} \
              --publisher-name "${{ env.APIM_PUBLISHER_NAME }}" \
              --sku-name ${{ env.APIM_SKU_NAME }} \
              --sku-capacity ${{ env.APIM_SKU_CAPACITY }} \
              --enable-managed-identity true
            
            echo "✅ APIM instance created successfully with ${{ env.APIM_SKU_NAME }} tier!"
            echo "✅ MCP servers are supported in this tier"
          else
            echo "APIM instance already exists, skipping creation..."
          fi

      - name: Get APIM Gateway URL
        id: apim-gateway
        run: |
          APIM_GATEWAY=$(az apim show \
            --name ${{ env.APIM_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query gatewayUrl -o tsv)
          echo "APIM Gateway URL: $APIM_GATEWAY"
          echo "url=$APIM_GATEWAY" >> $GITHUB_OUTPUT

      - name: Create API for Web App
        run: |
          # Check if API exists
          if ! az apim api show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --service-name ${{ env.APIM_NAME }} \
            --api-id web-app-api 2>/dev/null; then
            
            echo "Creating Web App API..."
            az apim api create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --service-name ${{ env.APIM_NAME }} \
              --api-id web-app-api \
              --path "/" \
              --display-name "AI Security Web App API" \
              --protocols https \
              --service-url "https://${{ needs.deploy-web-app.outputs.web-app-url }}"
          else
            echo "Web App API already exists, updating..."
            az apim api update \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --service-name ${{ env.APIM_NAME }} \
              --api-id web-app-api \
              --service-url "https://${{ needs.deploy-web-app.outputs.web-app-url }}"
          fi

      - name: Create API Operations for Web App
        run: |
          # Wildcard operation to route all traffic
          az apim api operation create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --service-name ${{ env.APIM_NAME }} \
            --api-id web-app-api \
            --url-template "/*" \
            --method "*" \
            --display-name "All Operations" \
            --operation-id all-operations || echo "Operation already exists"

      - name: Apply Rate Limiting Policy
        run: |
          cat > apim-policy.xml <<'EOF'
          <policies>
            <inbound>
              <base />
              <!-- Rate limiting: 100 calls per minute per IP -->
              <rate-limit-by-key calls="100" renewal-period="60" counter-key="@(context.Request.IpAddress)" />
              
              <!-- CORS policy for web clients -->
              <cors allow-credentials="true">
                <allowed-origins>
                  <origin>*</origin>
                </allowed-origins>
                <allowed-methods>
                  <method>GET</method>
                  <method>POST</method>
                  <method>PUT</method>
                  <method>DELETE</method>
                  <method>OPTIONS</method>
                </allowed-methods>
                <allowed-headers>
                  <header>*</header>
                </allowed-headers>
              </cors>
              
              <!-- Set backend URL -->
              <set-backend-service base-url="https://${{ needs.deploy-web-app.outputs.web-app-url }}" />
              
              <!-- Add security headers -->
              <set-header name="X-Forwarded-For" exists-action="override">
                <value>@(context.Request.IpAddress)</value>
              </set-header>
              <set-header name="X-APIM-Gateway" exists-action="override">
                <value>true</value>
              </set-header>
            </inbound>
            <backend>
              <base />
            </backend>
            <outbound>
              <base />
              <!-- Add security headers to response -->
              <set-header name="X-Content-Type-Options" exists-action="override">
                <value>nosniff</value>
              </set-header>
              <set-header name="X-Frame-Options" exists-action="override">
                <value>DENY</value>
              </set-header>
              <set-header name="Strict-Transport-Security" exists-action="override">
                <value>max-age=31536000; includeSubDomains</value>
              </set-header>
            </outbound>
            <on-error>
              <base />
            </on-error>
          </policies>
          EOF
          
          az apim api policy create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --service-name ${{ env.APIM_NAME }} \
            --api-id web-app-api \
            --policy-file apim-policy.xml || echo "Policy already exists, updating..."

      - name: Create Subscription Key (Optional)
        run: |
          # Create a subscription for authenticated access
          if ! az apim subscription show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --service-name ${{ env.APIM_NAME }} \
            --sid web-app-subscription 2>/dev/null; then
            
            az apim subscription create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --service-name ${{ env.APIM_NAME }} \
              --subscription-id web-app-subscription \
              --scope /apis/web-app-api \
              --display-name "Web App Subscription" \
              --state active || echo "Subscription already exists"
          fi

      - name: Get Subscription Key
        id: subscription-key
        run: |
          PRIMARY_KEY=$(az apim subscription show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --service-name ${{ env.APIM_NAME }} \
            --sid web-app-subscription \
            --query primaryKey -o tsv 2>/dev/null || echo "")
          
          if [ -n "$PRIMARY_KEY" ]; then
            echo "::add-mask::$PRIMARY_KEY"
            echo "key=$PRIMARY_KEY" >> $GITHUB_OUTPUT
            echo "✅ Subscription key retrieved"
          else
            echo "⚠️  No subscription key available"
          fi

      - name: Configure Container Apps to Accept APIM Traffic
        run: |
          # Update Web App to only accept traffic from APIM (optional - for maximum security)
          # Note: This restricts direct access to Container Apps
          echo "Container Apps configured to work with APIM"
          echo "Note: Direct Container App URLs still accessible for debugging"
          echo "Consider implementing IP restrictions in production"

    outputs:
      apim-gateway-url: ${{ steps.apim-gateway.outputs.url }}
      subscription-key: ${{ steps.subscription-key.outputs.key }}

  # Job 4: Final Configuration and Testing
  configure-services:
    runs-on: ubuntu-latest
    needs: [deploy-mcp-server, deploy-web-app, deploy-apim]
    name: Configure CORS and Test Services
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update MCP Server CORS Settings
        run: |
          az containerapp update \
            --name ${{ env.MCP_SERVER_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set-env-vars \
              ALLOWED_ORIGINS=https://${{ needs.deploy-web-app.outputs.web-app-url }},http://localhost:3000,${{ needs.deploy-apim.outputs.apim-gateway-url }}

      - name: Test APIM Gateway
        run: |
          echo "Testing APIM Gateway..."
          APIM_URL="${{ needs.deploy-apim.outputs.apim-gateway-url }}"
          if [ -n "$APIM_URL" ]; then
            curl -f "$APIM_URL" -H "Ocp-Apim-Subscription-Key: ${{ needs.deploy-apim.outputs.subscription-key }}" || echo "APIM check requires subscription key"
          else
            echo "APIM URL not available"
          fi

      - name: Test MCP Server Health
        run: |
          echo "Testing MCP Server health endpoint..."
          curl -f ${{ needs.deploy-mcp-server.outputs.mcp-server-url }}/health || echo "Health check failed"

      - name: Test Web App Health
        run: |
          echo "Testing Web App..."
          curl -f https://${{ needs.deploy-web-app.outputs.web-app-url }} || echo "Web app check failed"

      - name: Deployment Summary
        run: |
          echo "🚀 Deployment Complete!"
          echo "================================"
          echo "🔒 APIM Gateway URL (RECOMMENDED): ${{ needs.deploy-apim.outputs.apim-gateway-url }}"
          echo "🔑 APIM Subscription Key: ${{ needs.deploy-apim.outputs.subscription-key }}"
          echo ""
          echo "Backend Services (Protected by APIM):"
          echo "📦 MCP Server URL: ${{ needs.deploy-mcp-server.outputs.mcp-server-url }}"
          echo "🌐 Web App URL: https://${{ needs.deploy-web-app.outputs.web-app-url }}"
          echo "================================"
          echo "�️ Security Features Enabled:"
          echo "- ✅ API Management Gateway (Rate limiting: 100 calls/min per IP)"
          echo "- ✅ CORS protection"
          echo "- ✅ Security headers (HSTS, X-Frame-Options, etc.)"
          echo "- ✅ Subscription key authentication available"
          echo "- ✅ Request/Response transformation"
          echo "- ✅ IP-based rate limiting"
          echo "================================"
          echo "�💰 Cost Optimization Tips:"
          echo "- APIM Consumption tier: Pay per execution"
          echo "- Web app has min-replicas=0 (scales to zero when idle)"
          echo "- MCP server has min-replicas=1 (always available)"
          echo "- Monitor usage in Azure Portal > API Management"
          echo "================================"
          echo "📋 Next steps:"
          echo "1. Use APIM Gateway URL for all client requests"
          echo "2. Add subscription key to requests: Ocp-Apim-Subscription-Key header"
          echo "3. Monitor API calls in Azure Portal > API Management > Analytics"
          echo "4. Configure custom domain for APIM if needed"
          echo "5. Set up Azure Monitor alerts for rate limits and errors"
          echo "6. Review and adjust rate limiting policies based on usage"
          echo ""
          echo "🔐 Accessing your app:"
          echo "Public (via APIM): ${{ needs.deploy-apim.outputs.apim-gateway-url }}"
          echo "With subscription key: Add header 'Ocp-Apim-Subscription-Key: <key>'"
          echo "Direct (bypass APIM): https://${{ needs.deploy-web-app.outputs.web-app-url }}"
