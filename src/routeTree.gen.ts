/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ThreatProtectionRouteImport } from './routes/threat-protection'
import { Route as TestAzureOpenaiRouteImport } from './routes/test-azure-openai'
import { Route as IdentityAccessRouteImport } from './routes/identity-access'
import { Route as DataSecurityRouteImport } from './routes/data-security'
import { Route as ComplianceRouteImport } from './routes/compliance'
import { Route as IndexRouteImport } from './routes/index'

const ThreatProtectionRoute = ThreatProtectionRouteImport.update({
  id: '/threat-protection',
  path: '/threat-protection',
  getParentRoute: () => rootRouteImport,
} as any)
const TestAzureOpenaiRoute = TestAzureOpenaiRouteImport.update({
  id: '/test-azure-openai',
  path: '/test-azure-openai',
  getParentRoute: () => rootRouteImport,
} as any)
const IdentityAccessRoute = IdentityAccessRouteImport.update({
  id: '/identity-access',
  path: '/identity-access',
  getParentRoute: () => rootRouteImport,
} as any)
const DataSecurityRoute = DataSecurityRouteImport.update({
  id: '/data-security',
  path: '/data-security',
  getParentRoute: () => rootRouteImport,
} as any)
const ComplianceRoute = ComplianceRouteImport.update({
  id: '/compliance',
  path: '/compliance',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/compliance': typeof ComplianceRoute
  '/data-security': typeof DataSecurityRoute
  '/identity-access': typeof IdentityAccessRoute
  '/test-azure-openai': typeof TestAzureOpenaiRoute
  '/threat-protection': typeof ThreatProtectionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/compliance': typeof ComplianceRoute
  '/data-security': typeof DataSecurityRoute
  '/identity-access': typeof IdentityAccessRoute
  '/test-azure-openai': typeof TestAzureOpenaiRoute
  '/threat-protection': typeof ThreatProtectionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/compliance': typeof ComplianceRoute
  '/data-security': typeof DataSecurityRoute
  '/identity-access': typeof IdentityAccessRoute
  '/test-azure-openai': typeof TestAzureOpenaiRoute
  '/threat-protection': typeof ThreatProtectionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/compliance'
    | '/data-security'
    | '/identity-access'
    | '/test-azure-openai'
    | '/threat-protection'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/compliance'
    | '/data-security'
    | '/identity-access'
    | '/test-azure-openai'
    | '/threat-protection'
  id:
    | '__root__'
    | '/'
    | '/compliance'
    | '/data-security'
    | '/identity-access'
    | '/test-azure-openai'
    | '/threat-protection'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComplianceRoute: typeof ComplianceRoute
  DataSecurityRoute: typeof DataSecurityRoute
  IdentityAccessRoute: typeof IdentityAccessRoute
  TestAzureOpenaiRoute: typeof TestAzureOpenaiRoute
  ThreatProtectionRoute: typeof ThreatProtectionRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/threat-protection': {
      id: '/threat-protection'
      path: '/threat-protection'
      fullPath: '/threat-protection'
      preLoaderRoute: typeof ThreatProtectionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test-azure-openai': {
      id: '/test-azure-openai'
      path: '/test-azure-openai'
      fullPath: '/test-azure-openai'
      preLoaderRoute: typeof TestAzureOpenaiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/identity-access': {
      id: '/identity-access'
      path: '/identity-access'
      fullPath: '/identity-access'
      preLoaderRoute: typeof IdentityAccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data-security': {
      id: '/data-security'
      path: '/data-security'
      fullPath: '/data-security'
      preLoaderRoute: typeof DataSecurityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/compliance': {
      id: '/compliance'
      path: '/compliance'
      fullPath: '/compliance'
      preLoaderRoute: typeof ComplianceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComplianceRoute: ComplianceRoute,
  DataSecurityRoute: DataSecurityRoute,
  IdentityAccessRoute: IdentityAccessRoute,
  TestAzureOpenaiRoute: TestAzureOpenaiRoute,
  ThreatProtectionRoute: ThreatProtectionRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
